// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LamThanhNguyen/yoyo-store-backend/server_main/api (interfaces: customerInserter,orderInserter,transactionInserter)
//
// Generated by this command:
//
//	mockgen -package api -destination server_main/api/mock_interfaces_test.go github.com/LamThanhNguyen/yoyo-store-backend/server_main/api customerInserter,orderInserter,transactionInserter
//

// Package api is a generated GoMock package.
package api

import (
	reflect "reflect"

	models "github.com/LamThanhNguyen/yoyo-store-backend/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockcustomerInserter is a mock of customerInserter interface.
type MockcustomerInserter struct {
	ctrl     *gomock.Controller
	recorder *MockcustomerInserterMockRecorder
	isgomock struct{}
}

// MockcustomerInserterMockRecorder is the mock recorder for MockcustomerInserter.
type MockcustomerInserterMockRecorder struct {
	mock *MockcustomerInserter
}

// NewMockcustomerInserter creates a new mock instance.
func NewMockcustomerInserter(ctrl *gomock.Controller) *MockcustomerInserter {
	mock := &MockcustomerInserter{ctrl: ctrl}
	mock.recorder = &MockcustomerInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcustomerInserter) EXPECT() *MockcustomerInserterMockRecorder {
	return m.recorder
}

// InsertCustomer mocks base method.
func (m *MockcustomerInserter) InsertCustomer(arg0 models.Customer) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCustomer", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCustomer indicates an expected call of InsertCustomer.
func (mr *MockcustomerInserterMockRecorder) InsertCustomer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCustomer", reflect.TypeOf((*MockcustomerInserter)(nil).InsertCustomer), arg0)
}

// MockorderInserter is a mock of orderInserter interface.
type MockorderInserter struct {
	ctrl     *gomock.Controller
	recorder *MockorderInserterMockRecorder
	isgomock struct{}
}

// MockorderInserterMockRecorder is the mock recorder for MockorderInserter.
type MockorderInserterMockRecorder struct {
	mock *MockorderInserter
}

// NewMockorderInserter creates a new mock instance.
func NewMockorderInserter(ctrl *gomock.Controller) *MockorderInserter {
	mock := &MockorderInserter{ctrl: ctrl}
	mock.recorder = &MockorderInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderInserter) EXPECT() *MockorderInserterMockRecorder {
	return m.recorder
}

// InsertOrder mocks base method.
func (m *MockorderInserter) InsertOrder(arg0 models.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrder", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrder indicates an expected call of InsertOrder.
func (mr *MockorderInserterMockRecorder) InsertOrder(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*MockorderInserter)(nil).InsertOrder), arg0)
}

// MocktransactionInserter is a mock of transactionInserter interface.
type MocktransactionInserter struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionInserterMockRecorder
	isgomock struct{}
}

// MocktransactionInserterMockRecorder is the mock recorder for MocktransactionInserter.
type MocktransactionInserterMockRecorder struct {
	mock *MocktransactionInserter
}

// NewMocktransactionInserter creates a new mock instance.
func NewMocktransactionInserter(ctrl *gomock.Controller) *MocktransactionInserter {
	mock := &MocktransactionInserter{ctrl: ctrl}
	mock.recorder = &MocktransactionInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionInserter) EXPECT() *MocktransactionInserterMockRecorder {
	return m.recorder
}

// InsertTransaction mocks base method.
func (m *MocktransactionInserter) InsertTransaction(arg0 models.Transaction) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MocktransactionInserterMockRecorder) InsertTransaction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MocktransactionInserter)(nil).InsertTransaction), arg0)
}
